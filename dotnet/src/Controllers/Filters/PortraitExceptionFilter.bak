using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Entities.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
// using System.Web.Http.Filters; // Microsoft.AspNet.WebApi.Core
using System.Net;
using Microsoft.AspNetCore.Diagnostics;
using LoggerService;

namespace Filters.ExceptionFilters
{
    //public class PortraitExceptionFilter : IExceptionFilter
    public class PortraitExceptionFilter : ExceptionFilterAttribute
    {
        private readonly IErrorDetails _errorDetails;
        ILoggerManager _logger;

        public PortraitExceptionFilter(
            IErrorDetails errorDetails,
            ILoggerManager logger)
        {
            _errorDetails = errorDetails;
            _logger = logger;
        }

        //public void OnException(ExceptionContext context) {}

        public override void OnException(ExceptionContext context) {
            //ApiError apiError = null;

            /*#if !DEBUG
                var msg = "An unhandled error occurred.";                
                string stack = null;
            #else
                var msg = context.Exception.GetBaseException().Message;
                string stack = context.Exception.StackTrace;
            #endif*/

            string msg = context.Exception.GetBaseException().Message;
            string stack = context.Exception.StackTrace;
            ApiError apiError = new ApiError(msg);

            context.HttpContext.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            context.HttpContext.Response.ContentType = "application/json";

            var contextFeature = context.HttpContext.Features.Get<IExceptionHandlerFeature>();
            if(contextFeature != null)
            { 
                _logger.LogError($"Something went wrong: {contextFeature.Error}");

                context.Result = new JsonResult(apiError);
            }
            
            //apiError.detail = stack;

            //context.HttpContext.Response.StatusCode = 500;

            //context.Result = new JsonResult(apiError);

            /*context.Result = context.HttpContext.Response.WriteAsync(new ErrorDetails()
            {
                StatusCode = context.HttpContext.Response.StatusCode,
                Message = "Internal Server Error from the exception filter."
            }.ToString());*/

            base.OnException(context);
        }

        /*public async Task OnExceptionAsync(HttpActionExecutedContext context, CancellationToken cancellationToken)
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

            context.ExceptionHandled = true;

            context.Result = await context.Response.WriteAsync(new ErrorDetails()
            {
                StatusCode = context.Response.StatusCode,
                Message = "Internal Server Error from the exception filter."
            }.ToString());
            /*var result = new ViewResult { ViewName = "CustomError" };
            result.ViewData = new ViewDataDictionary(_errorDetails, context.ModelState);
            result.ViewData.Add("Exception", context.Exception);

            // Here we can pass additional detailed data via ViewData
            context.ExceptionHandled = true; // mark exception as handled
            context.Result = result;
        }*/
    }
}