using System;
using System.Collections.Generic;
using System.Linq;
using Entities.Models;
using Moq;
using Repositories;
using Xunit;
using Controllers;

namespace Tests
{
    public class PortraitAPITests
    {
        _portraitRepository = new IPortraitRepository()
            {
                new ShoppingItem() { Id = new Guid("ab2bd817-98cd-4cf3-a80a-53ea0cd9c200"),
                    Name = "Orange Juice", Manufacturer="Orange Tree", Price = 5.00M },
                new ShoppingItem() { Id = new Guid("815accac-fd5b-478a-a9d6-f171a2f6ae7f"),
                    Name = "Diary Milk", Manufacturer="Cow", Price = 4.00M },
                new ShoppingItem() { Id = new Guid("33704c4a-5b87-464c-bfb6-51971b4d18ad"),
                    Name = "Frozen Pizza", Manufacturer="Uncle Mickey", Price = 12.00M }
            };
        [Fact]
        public void GetAllPortraits_ShouldReturnAllPortraits()
        {
            var testPortraits = GetTestPortraits();
            var controller = new PortraitController();

            var result = controller.GetAllPortraits() as List<Product>;
            Assert.AreEqual(testPortraits.Count, result.Count);
        }

        [TestMethod]
        public async Task GetAllPortraitsAsync_ShouldReturnAllPortraits()
        {
            var testPortraits = GetTestPortraits();
            var controller = new SimpleProductController(testPortraits);

            var result = await controller.GetAllPortraitsAsync() as List<Product>;
            Assert.AreEqual(testPortraits.Count, result.Count);
        }

        [TestMethod]
        public void GetProduct_ShouldReturnCorrectProduct()
        {
            var testPortraits = GetTestPortraits();
            var controller = new SimpleProductController(testPortraits);

            var result = controller.GetProduct(4) as OkNegotiatedContentResult<Product>;
            Assert.IsNotNull(result);
            Assert.AreEqual(testPortraits[3].Name, result.Content.Name);
        }

        [TestMethod]
        public async Task GetProductAsync_ShouldReturnCorrectProduct()
        {
            var testPortraits = GetTestPortraits();
            var controller = new SimpleProductController(testPortraits);

            var result = await controller.GetProductAsync(4) as OkNegotiatedContentResult<Product>;
            Assert.IsNotNull(result);
            Assert.AreEqual(testPortraits[3].Name, result.Content.Name);
        }

        [TestMethod]
        public void GetProduct_ShouldNotFindProduct()
        {
            var controller = new SimpleProductController(GetTestPortraits());

            var result = controller.GetProduct(999);
            Assert.IsInstanceOfType(result, typeof(NotFoundResult));
        }

        private List<Product> GetTestPortraits()
        {
            var testPortraits = new List<Product>();
            testPortraits.Add(new Product { Id = 1, Name = "Demo1", Price = 1 });
            testPortraits.Add(new Product { Id = 2, Name = "Demo2", Price = 3.75M });
            testPortraits.Add(new Product { Id = 3, Name = "Demo3", Price = 16.99M });
            testPortraits.Add(new Product { Id = 4, Name = "Demo4", Price = 11.00M });

            return testPortraits;
        }
    }
}